// (-- api-linter: standard-methods=disabled --)
// (-- api-linter: non-project-resources=disabled --)
// (-- api-linter: standard-fields=disabled --)
// (-- api-linter: active-developer-methods=disabled --)
syntax = "proto3";

package google.cloud.apigee.v1;

import "google/api/annotations.proto";
import "google/api/auditing.proto";
import "google/api/authz.proto";
import "google/api/field_behavior.proto";
import "google/api/policy.proto";
import "google/cloud/apigee/v1/resource.proto";

option use_java_stubby_library = true;
option java_multiple_files = true;
option java_outer_classname = "DeveloperAppsProto";
option java_package = "com.google.cloud.apigee.v1";

service DeveloperApps {
  // Manages access to a developer app by enabling you to:
  //
  // * Approve or revoke a developer app
  // * Generate a new consumer key and secret for a developer app
  //
  // To approve or revoke a developer app, set the `action` query parameter to
  // `approve` or `revoke`, respectively, and the
  // `Content-Type` header to `application/octet-stream`. If a developer app is
  // revoked, none of its API keys are valid for API calls even though
  // the keys are still approved. If successful, the API call returns the
  // following HTTP status code: `204 No Content`
  //
  // To generate a new consumer key and secret for a developer
  // app, pass the new key/secret details. Rather than
  // replace an existing key, this API generates a new
  // key. In this case, multiple key
  // pairs may be associated with a single developer app. Each key pair has an
  // independent status (`approve` or `revoke`) and expiration time.
  // Any approved, non-expired key can be used in an API call.
  //
  // For example, if you're using API key rotation, you can generate new
  // keys with expiration times that overlap keys that are going to expire.
  // You might also generate a new consumer key/secret if the security of the
  // original key/secret is compromised.
  //
  // The `keyExpiresIn` property defines the
  // expiration time for the API key in milliseconds. If you don't set
  // this property or set it to `-1`, the API key never expires.
  //
  // **Notes**:
  //
  // * When generating a new key/secret, this API replaces the
  // existing attributes, notes, and callback URLs with those specified in the
  // request. Include or exclude any existing information that you want to
  // retain or delete, respectively.
  // * To migrate existing consumer keys and secrets to hybrid from another
  // system, see the
  // [CreateDeveloperAppKey][DeveloperAppKeys.CreateDeveloperAppKey] API.
  rpc GenerateKeyPairOrUpdateDeveloperAppStatus(
    GenerateKeyPairOrUpdateDeveloperAppStatusRequest) returns (DeveloperApp) {
    option (google.api.http) = {
      post: "/v1/{name=organizations/*/developers/*/apps/*}",
      body: "developer_app"
    };
    option (google.api.method_auditing).directive =
      "AUDIT_REQUEST_AND_RESPONSE";
  }

  // Creates an app associated with a developer. This API associates the
  // developer app with the specified API
  // product and auto-generates an API key for the app to use in calls to API
  // proxies inside that API product.
  //
  // The `name` is the unique ID of the app
  // that you can use in API calls. The `DisplayName` (set as an
  // attribute) appears in the UI. If you don't set the
  // `DisplayName` attribute, the `name` appears in the UI.
  rpc CreateDeveloperApp(CreateDeveloperAppRequest) returns (DeveloperApp) {
    option (google.api.http) = {
      post: "/v1/{parent=organizations/*/developers/*}/apps",
      body: "developer_app"
    };
    option (google.api.method_auditing).directive =
      "AUDIT_REQUEST_AND_RESPONSE";
  }

  // Deletes a developer app.
  //
  // **Note**: The delete operation is asynchronous. The developer app is
  // deleted immediately,
  // but its associated resources, such as app
  // keys or access tokens, may take anywhere from a few seconds to a
  // few minutes to be deleted.
  rpc DeleteDeveloperApp(DeleteDeveloperAppRequest) returns (DeveloperApp) {
    option (google.api.http) = {
      delete: "/v1/{name=organizations/*/developers/*/apps/*}"
    };
    option (google.api.method_auditing).directive = "AUDIT_REQUEST_ONLY";
  }

  // Returns the details for a developer app.
  rpc GetDeveloperApp(GetDeveloperAppRequest) returns (DeveloperApp) {
    option (google.api.http) = {
      get: "/v1/{name=organizations/*/developers/*/apps/*}"
    };
    option (google.api.method_auditing).directive = "AUDIT_REQUEST_ONLY";
  }

  // Lists all apps created by a developer in an Apigee organization.
  // Optionally, you can request an expanded view of the developer apps.
  //
  // A maximum of 100 developer apps are returned per API call. You can paginate
  // the list of deveoper apps returned using the `startKey` and `count` query
  // parameters.
  rpc ListDeveloperApps(ListDeveloperAppsRequest)
    returns (ListDeveloperAppsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=organizations/*/developers/*}/apps"
    };
    option (google.api.method_auditing).directive =
      "AUDIT_REQUEST_AND_RESPONSE";
  }

  // Updates the details for a developer app. In addition, you can
  // add an API product to a developer app and automatically generate
  // an API key for the app to use when calling APIs in the API product.
  //
  // If you want to use an existing API key for the API product,
  // add the API product to the API key using the
  // [UpdateDeveloperAppKey][DeveloperAppKeys.UpdateDeveloperAppKey]
  // API.
  //
  // Using this API, you cannot update the following:
  //
  // * App name as it is the primary key used to identify the app and cannot
  //   be changed.
  // * Scopes associated with the app. Instead, use the
  //   [ReplaceDeveloperAppKey][DeveloperAppKeys.ReplaceDeveloperAppKey] API.
  //
  // This API replaces the
  // existing attributes with those specified in the request.
  // Include or exclude any existing attributes that you want to retain or
  // delete, respectively.
  rpc UpdateDeveloperApp(UpdateDeveloperAppRequest) returns (DeveloperApp) {
    option (google.api.http) = {
      put: "/v1/{name=organizations/*/developers/*/apps/*}",
      body: "developer_app"
    };
    option (google.api.method_auditing).directive =
      "AUDIT_REQUEST_AND_RESPONSE";
  }

  // Returns a developer app attribute.
  rpc GetDeveloperAppAttribute(GetDeveloperAppAttributeRequest)
    returns (Attribute) {
    option (google.api.http) = {
      get: "/v1/{name=organizations/*/developers/*/apps/*/attributes/*}"
    };
    option (google.api.method_auditing).directive = "AUDIT_REQUEST_ONLY";
  }

  // Updates a developer app attribute.
  //
  // **Note**: OAuth access tokens and Key Management Service (KMS) entities
  // (apps, developers, and API products) are cached for 180 seconds
  // (current default). Any custom attributes associated with these entities
  // are cached for at least 180 seconds after the entity is accessed at
  // runtime. Therefore, an `ExpiresIn` element on the OAuthV2 policy
  // won't be able to expire an access token in less than 180 seconds.
  rpc UpdateDeveloperAppAttribute(UpdateDeveloperAppAttributeRequest)
    returns (Attribute) {
    option (google.api.http) = {
      post: "/v1/{name=organizations/*/developers/*/apps/*/attributes/*}"
      body: "attribute"
    };
    option (google.api.method_auditing).directive =
      "AUDIT_REQUEST_AND_RESPONSE";
  }

  // Deletes a developer app attribute.
  rpc DeleteDeveloperAppAttribute(DeleteDeveloperAppAttributeRequest)
    returns (Attribute) {
    option (google.api.http) = {
      delete: "/v1/{name=organizations/*/developers/*/apps/*/attributes/*}"
    };
    option (google.api.method_auditing).directive = "AUDIT_REQUEST_ONLY";
  }

  // Returns a list of all developer app attributes.
  rpc ListDeveloperAppAttributes(ListDeveloperAppAttributesRequest)
    returns (Attributes) {
    option (google.api.http) = {
      get: "/v1/{parent=organizations/*/developers/*/apps/*}/attributes"
    };
    option (google.api.method_auditing).directive =
      "AUDIT_REQUEST_AND_RESPONSE";
  }

  // Updates attributes for a developer app. This API replaces the
  // current attributes with those specified in the request.
  rpc UpdateDeveloperAppAttributes(UpdateDeveloperAppAttributesRequest)
    returns (Attributes) {
    option (google.api.http) = {
      post: "/v1/{name=organizations/*/developers/*/apps/*}/attributes",
      body: "attributes"
    };
    option (google.api.method_auditing).directive =
      "AUDIT_REQUEST_AND_RESPONSE";
  }
}

message DeveloperApp {
  // ID of the developer app.
  string app_id = 1 [(google.api.field_auditing).directive = "AUDIT"];
  // List of attributes for the developer app.
  repeated Attribute attributes = 2
  [(google.api.field_auditing).directive = "AUDIT"];
  // Callback URL used by OAuth 2.0 authorization servers to communicate
  // authorization codes back to developer apps.
  string callback_url = 3 [(google.api.field_auditing).directive = "AUDIT"];
  // Time the developer app was created in milliseconds since epoch.
  // (-- api-linter: standard-fields=disabled --)
  int64 create_time_millis = 4
  [json_name = "createdAt", (google.api.field_behavior) = OUTPUT_ONLY];
  // Set of credentials for the developer app consisting of the
  // consumer key/secret pairs associated with the API products.
  repeated Credential credentials = 5
  [(google.api.field_behavior) = OUTPUT_ONLY];
  // ID of the developer.
  string developer_id = 6 [(google.api.field_auditing).directive = "AUDIT"];
  // Time the developer app was modified in milliseconds since epoch.
  // (-- api-linter: standard-fields=disabled --)
  int64 update_time_millis = 7
  [json_name = "lastModifiedAt", (google.api.field_behavior) = OUTPUT_ONLY];
  // Name of the developer app.
  string developer_app_name = 8
  [json_name = "name", (google.api.field_auditing).directive = "AUDIT"];
  // Scopes to apply to the developer app. The specified scopes must
  // already exist for the API product that you associate with the developer
  // app.
  repeated string scopes = 9 [(google.api.field_auditing).directive = "AUDIT"];
  // Status of the credential. Valid values include `approved` or `revoked`.
  string status = 10 [(google.api.field_auditing).directive = "AUDIT"];
  // Expiration time, in milliseconds, for the consumer key that
  // is generated for the developer app. If not set or left to the default
  // value of `-1`, the API key never expires.
  // The expiration time can't be updated after it is set.
  // (-- api-linter: standard-fields=disabled --)
  int64 key_expire_time_millis = 11 [json_name = "keyExpiresIn"];
  // Developer app family.
  string app_family = 12 [(google.api.field_auditing).directive = "AUDIT"];
  // List of API products associated with the developer app.
  repeated string api_products = 13
  [(google.api.field_auditing).directive = "AUDIT"];
}

message ListDeveloperAppsResponse {
  // List of developer apps and their credentials.
  repeated DeveloperApp app = 1
  [(google.api.field_auditing).directive = "AUDIT_SIZE"];
}

// Request for [CreateDeveloperApp][DeveloperApps.CreateDeveloperApp].
message CreateDeveloperAppRequest {
  // Name of the developer. Use the following structure in your request:
  //    `organizations/{org}/developers/{developer_email}`
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_policy).is_service_consumer = true,
    (google.api.field_policy).resource_type = "CALLBACK",
    (google.api.field_auditing).directive = "AUDIT",
    (google.api.authz).permissions = "apigee.developerapps.create"
  ];
  // Request body to create a new developer app.
  DeveloperApp developer_app = 2
  [(google.api.field_auditing).directive = "AUDIT"];
}

// Request for
// [GenerateKeyPairOrUpdateDeveloperAppStatus][DeveloperApps.GenerateKeyPairOrUpdateDeveloperAppStatus].
message GenerateKeyPairOrUpdateDeveloperAppStatusRequest {
  // Name of the developer app. Use the following structure in your request:
  //   `organizations/{org}/developers/{developer_email}/apps/{app}`
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_policy).is_service_consumer = true,
    (google.api.field_policy).resource_type = "CALLBACK",
    (google.api.field_auditing).directive = "AUDIT",
    (google.api.authz).permissions = "apigee.developerapps.manage"
  ];
  // Action. Valid values are `approve` or `revoke`.
  string action = 2 [(google.api.field_auditing).directive = "AUDIT"];
  // Request body used to create a new key pair for a developer app.
  DeveloperApp developer_app = 3
  [(google.api.field_auditing).directive = "AUDIT"];
}

// Request for [DeleteDeveloperApp][DeveloperApps.DeleteDeveloperApp].
message DeleteDeveloperAppRequest {
  // Name of the developer app. Use the following structure in your request:
  //   `organizations/{org}/developers/{developer_email}/apps/{app}`
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_policy).is_service_consumer = true,
    (google.api.field_policy).resource_type = "CALLBACK",
    (google.api.field_auditing).directive = "AUDIT",
    (google.api.authz).permissions = "apigee.developerapps.delete"
  ];
}

// Request for
// [GetDeveloperApp][DeveloperApps.GetDeveloperApp].
message GetDeveloperAppRequest {
  // Name of the developer app. Use the following structure in your request:
  //   `organizations/{org}/developers/{developer_email}/apps/{app}`
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_policy).is_service_consumer = true,
    (google.api.field_policy).resource_type = "CALLBACK",
    (google.api.field_auditing).directive = "AUDIT",
    (google.api.authz).permissions = "apigee.developerapps.get"
  ];

  // **Note**: Must be used in conjunction with the `entity` parameter.
  //
  // Set to `count` to return the number of API resources
  // that have been approved for access by a developer app in the
  // specified Apigee organization.
  string query = 2 [(google.api.field_auditing).directive = "AUDIT"];
  // **Note**: Must be used in conjunction with the `query` parameter.
  //
  // Set to `apiresources`
  // to return the number of API resources
  // that have been approved for access by a developer app in the
  // specified Apigee organization.
  string entity = 3 [(google.api.field_auditing).directive = "AUDIT"];
}

// Request for [ListDeveloperApps][DeveloperApps.ListDeveloperApps].
message ListDeveloperAppsRequest {
  // Name of the developer. Use the following structure in your request:
  //   `organizations/{org}/developers/{developer_email}`
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_policy).is_service_consumer = true,
    (google.api.field_policy).resource_type = "CALLBACK",
    (google.api.field_auditing).directive = "AUDIT",
    (google.api.authz).permissions = "apigee.developerapps.list"
  ];
  // Specifies whether to expand the results. Set to `true`
  // to expand the results. This query parameter is not valid if you use
  // the `count` or `startKey` query parameters.
  bool expand = 2 [(google.api.field_behavior) = OPTIONAL];
  // Number of developer apps to return in the API call. Use with the `startKey`
  // parameter to provide more targeted filtering.
  // The limit is 1000.
  int64 count = 3;
  // **Note**: Must be used in conjunction with the `count` parameter.
  //
  // Name of the developer app from which to start displaying the list of
  // developer apps. For example, if you're returning 50 developer apps at
  // a time (using the `count` query parameter), you can view developer apps
  // 50-99 by entering the name of the 50th developer app.
  // The developer app name is case sensitive.
  string start_key = 4;
  // Specifies whether to expand the results in shallow mode.
  // Set to `true` to expand the results in shallow mode.
  bool shallow_expand = 5 [(google.api.field_behavior) = OPTIONAL];
}

// Request for [UpdateDeveloperApp][DeveloperApps.UpdateDeveloperApp].
message UpdateDeveloperAppRequest {
  // Name of the developer app. Use the following structure in your request:
  //   `organizations/{org}/developers/{developer_email}/apps/{app}`
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_policy).is_service_consumer = true,
    (google.api.field_policy).resource_type = "CALLBACK",
    (google.api.field_auditing).directive = "AUDIT",
    (google.api.authz).permissions = "apigee.developerapps.manage"
  ];
  // Request body to create a new developer app.
  // The {app} should be passed into the request body in the API proxy
  // layer.
  DeveloperApp developer_app = 2
  [(google.api.field_auditing).directive = "AUDIT"];
}

// Request for
// [GetDeveloperAppAttribute][DeveloperApps.GetDeveloperAppAttribute].
message GetDeveloperAppAttributeRequest {
  // Name of the developer app attribute. Use the following structure in your
  // request:
  //   `organizations/{org}/developers/{developer_email}/apps/{app}/attributes/{attribute}`
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_policy).is_service_consumer = true,
    (google.api.field_policy).resource_type = "CALLBACK",
    (google.api.field_auditing).directive = "AUDIT",
    (google.api.authz).permissions = "apigee.developerappattributes.create"
  ];
}

// Request for
// [UpdateDeveloperAppAttribute][DeveloperApps.UpdateDeveloperAppAttribute].
message UpdateDeveloperAppAttributeRequest {
  // Name of the developer app attribute. Use the following structure in your
  // request:
  //   `organizations/{org}/developers/{developer_email}/apps/{app}/attributes/{attribute}`
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_policy).is_service_consumer = true,
    (google.api.field_policy).resource_type = "CALLBACK",
    (google.api.field_auditing).directive = "AUDIT",
    (google.api.authz).permissions = "apigee.developerappattributes.update"
  ];
  // Value for the attribute.
  Attribute attribute = 2 [(google.api.field_auditing).directive = "AUDIT"];
}

// Request for
// [DeleteDeveloperAppAttribute][DeveloperApps.DeleteDeveloperAppAttribute].
message DeleteDeveloperAppAttributeRequest {
  // Name of the developer app attribute. Use the following structure in your
  // request:
  //   `organizations/{org}/developers/{developer_email}/apps/{app}/attributes/{attribute}`
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_policy).is_service_consumer = true,
    (google.api.field_policy).resource_type = "CALLBACK",
    (google.api.field_auditing).directive = "AUDIT",
    (google.api.authz).permissions = "apigee.developerappattributes.delete"
  ];
}

// Request for
// [ListDeveloperAppAttributes][DeveloperApps.ListDeveloperAppAttributes].
message ListDeveloperAppAttributesRequest {
  // Name of the developer app. Use the following structure in your request:
  //   `organizations/{org}/developers/{developer_email}/apps/{app}`
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_policy).is_service_consumer = true,
    (google.api.field_policy).resource_type = "CALLBACK",
    (google.api.field_auditing).directive = "AUDIT",
    (google.api.authz).permissions = "apigee.developerappattributes.list"
  ];
}

// Request for [UpdateAllAttributes][DeveloperApps.UpdateAllAttributes].
message UpdateDeveloperAppAttributesRequest {
  // Name of the developer app. Use the following structure in your request:
  //   `organizations/{org}/developers/{developer_email}/apps/{app}`
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_policy).is_service_consumer = true,
    (google.api.field_policy).resource_type = "CALLBACK",
    (google.api.field_auditing).directive = "AUDIT",
    (google.api.authz).permissions =
      "apigee.developerappattributes.createOrUpdateAll"
  ];
  // Request body used to update a developer app attribute.
  Attributes attributes = 2 [(google.api.field_auditing).directive = "AUDIT"];
}
